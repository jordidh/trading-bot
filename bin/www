"use strict";

/**
 * Module dependencies
 */
var nconf = require('nconf')
var app = require('../app')
var debug = require('debug')(nconf.get("APP") + ':server')
var https = require('https')
var certs = require('../config/certs/certs')
var logger = require('../api/logger')

/**
 * Get port from environment and store in Express.
 */
var portHttps = normalizePort(nconf.get("APP_PORT_HTTPS"))
app.set('portHttps', portHttps)

/**
 * Create HTTP / HTTPS Server.
 */
var serverHttps = https.createServer(certs.ssl, app)

/**
 * Listen on provided port, on all network interfaces.
 */
serverHttps.listen(portHttps)
serverHttps.on('error', onError)
serverHttps.on('listening', onListeningHttps)

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  process.exit(1);

  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTPS SecureServer "listening" event.
 */
function onListeningHttps() {
  var addr = serverHttps.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  logger.info({ message: 'SERVIDOR HTTPS: ' + bind })
}
